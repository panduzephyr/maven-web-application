pipeline{
agent any
parameters {
  choice choices: ['qa', 'development', 'master', 'uat', 'patch-1 '], description: 'Select Branch Name', name: 'BranchName'
}
tools{
maven "maven3.8.5"
}
triggers {
  pollSCM('* * * * *')
  //cron('* * * * *')
}
options {
  timestamps()
  buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')
}
stages{
//Get the code from github
stage('CheckoutCode'){
steps{
    slacknotifications("STARTED")
git branch: "${params.BranchName}", credentialsId: '67b36730-1097-4a12-8bbd-f63ce27c537b', url: 'https://github.com/panduzephyr/maven-web-application.git'
}
}
// Do the build
stage('Build'){
steps{
sh "mvn clean package"
}
}
//Execute SonarQube Report
stage('ExecuteSonarQubeReport'){
steps{
sh "mvn clean sonar:sonar"
}
}
//Upload Artifacts Into Nexus
stage('UploadArtifactsIntoNexus'){
steps{
sh "mvn deploy"
}
}
//Deploy App Into Tomcat Server
stage('DeployAppIntoTomcatServer'){
steps{
sshagent(['d0fe678d-d9a1-4eaa-b86c-c8fd4a888248']) {  
sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@35.154.54.250:/opt/apache-tomcat-9.0.64/webapps/"
}
}
}
} //Stage Closing
post {
  success {
    slacknotifications(currentBuild.result)
  }
  failure {
    slacknotifications(currentBuild.result)
  }
}
} // Pipeline Closing
def slacknotifications(String buildStatus = 'STARTED') {
 
  buildStatus =  buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'ORANGE'
    colorCode = '#FFA500'
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
}
